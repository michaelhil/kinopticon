name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUN_VERSION: 1.0.0

jobs:
  validate:
    name: Code Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: üö® CRITICAL - Check for JavaScript files
        run: |
          echo "Validating TypeScript-only policy..."
          if find . -name "*.js" -not -path "./node_modules/*" -not -path "./*.config.js" -not -path "./.github/*" | grep -q .; then
            echo "‚ùå POLICY VIOLATION: JavaScript files found!"
            echo "The following JavaScript files must be removed or converted to TypeScript:"
            find . -name "*.js" -not -path "./node_modules/*" -not -path "./*.config.js" -not -path "./.github/*"
            echo ""
            echo "Only these JavaScript files are allowed:"
            echo "  - *.config.js (configuration files)"
            echo "  - Files in node_modules/"
            exit 1
          else
            echo "‚úÖ TypeScript-only policy maintained"
          fi
          
      - name: TypeScript type checking
        run: |
          echo "Running TypeScript compiler checks..."
          bun run typecheck
          
      - name: Code linting
        run: |
          echo "Running ESLint checks..."
          bun run lint
          
      - name: Code formatting check
        run: |
          echo "Checking code formatting..."
          bun run format:check
          
      - name: Architecture validation
        run: |
          echo "Validating architecture compliance..."
          bun run tools/validate-architecture.ts

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        test-type: [unit, integration]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run ${{ matrix.test-type }} tests
        run: |
          cd simulation
          bun run test:${{ matrix.test-type }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: simulation/test-results/

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run performance tests
        run: |
          cd simulation
          bun run test:performance
          
      - name: Run benchmarks
        run: |
          cd simulation
          bun run benchmark
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: simulation/benchmarks/results/

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build simulation
        run: |
          cd simulation
          bun run build
          
      - name: Verify build outputs
        run: |
          echo "Verifying build artifacts..."
          ls -la simulation/dist/
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            simulation/dist/
            !simulation/dist/**/*.map

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run security audit
        run: |
          echo "Running dependency security audit..."
          # Bun doesn't have built-in audit yet, so we'll use npm for this
          npm audit --audit-level=moderate || true
          
      - name: Check for sensitive files
        run: |
          echo "Checking for sensitive files..."
          if find . -name "*.pem" -o -name "*.key" -o -name "*.env" -not -path "./node_modules/*" | grep -q .; then
            echo "‚ùå Sensitive files found!"
            find . -name "*.pem" -o -name "*.key" -o -name "*.env" -not -path "./node_modules/*"
            exit 1
          else
            echo "‚úÖ No sensitive files found"
          fi